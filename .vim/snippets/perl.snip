snippet u
	#!/usr/bin/env perl
	use 5.10.0;
	use strict;
	use warnings;

snippet d
	use Data::Dump qw(dump);
	warn dump 

snippet dd
	use Data::Dumper;
	local $Data::Dumper::Indent = 1;
	local $Data::Dumper::Terse	= 1;
	warn Dumper 

snippet dds
	use Data::Dump::Streamer qw(Dumper);
	warn Dumper 

snippet c
	use Carp qw/croak/;

snippet n
	sub new {
		my $class = shift;
		my $args = ref $_[0] ? $_[0] : +{@_};

		${1:code}

		bless $args, $class;
	}

snippet l
	use Class::Accessor::Lite

snippet ll
	Clas::Accessor::Lite->mk_accessors(${1:accessors});

snippet t
	#!/usr/bin/env perl -w
	use strict;
	use Test::More;

	subtest => sub {
	};

	done_testing;

snippet s
	my ($self) = @_;

snippet ex
	use parent qw(Exporter);
	our @EXPORT_OK = qw();

snippet plack
	use Plack::Request;
	sub {
		my $req = Plack::Request->new($_[0]);
		given ($req->path) {
			when ('/') {
				$req->param('');
				return [200, ["Content-Type" => "text/html"], ['200 OK']];
			}
		}
		return [404, ["Content-Type" => "text/plain"], ['404 Not Found']];
	};

snippet file
	use Path::Class qw(file);
	my @lines = file(__FILE__)->dir->file('/path/to/file')->slurp;

snippet r200
	[ 200, ['Content-Type', 'text/plain'], ['200 OK'] ]

snippet r404
	[ 404, ['Content-Type', 'text/plain'], ['404 Not Found'] ]

snippet m
	#================================================================
	# 
	#================================================================
	sub hoge {
		my ($self) = @_;
	}

snippet lc
	#================================================================
	# 
	#================================================================

snippet sc
	#----------------------------------------------------------------
	# 
	#----------------------------------------------------------------

snippet getopt
	use Getopt::Long qw/:config posix_default no_ignore_case gnu_compat auto_help/;

snippet head
	#!/usr/bin/env perl
	use strict;
	use warnings;
	use utf8;
	use 5.012;

snippet SYNOPSIS
	=head1 SYNOPSIS
	=cut

snippet dumper
	use YAML; warn Dump (${1:code});

snippet ql
	use DBIx::QueryLog; my $guard = DBIx::QueryLog->guard();

snippet has
	has 'hoge' => (
		is => 'ro',
		isa => 'Int',
		default => sub { retrun; },
		lazy => 1,
	);

